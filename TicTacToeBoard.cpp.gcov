        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5: **/
        -:    6:
        -:    7:// Constructor sets an empty board and specifies it is X's turn first
    #####:    8:TicTacToeBoard::TicTacToeBoard()
        -:    9:{
    #####:   10:  turn = X;
    #####:   11:  for (int i = 0; i < BOARDSIZE; i++)
    #####:   12:    for (int j = 0; j < BOARDSIZE; j++)
    #####:   13:      board[i][j] = Blank;
    #####:   14:}
        -:   15:
        -:   16:/**
        -:   17: * Switches turn member variable to represent whether it's X's or O's turn
        -:   18: * and returns whose turn it is
        -:   19: **/
    #####:   20:Piece TicTacToeBoard::toggleTurn()
        -:   21:{
    #####:   22:  if (turn == X)
        -:   23:  {
    #####:   24:    turn = O;
        -:   25:  }
    #####:   26:  else if (turn == O)
        -:   27:  {
    #####:   28:    turn = X;
        -:   29:  }
        -:   30:  else
        -:   31:  {
    #####:   32:    turn = Invalid;
        -:   33:  }
    #####:   34:}
        -:   35://Resets each board location to the Blank Piece value
        -:   36:// void TicTacToeBoard::clearBoard()
        -:   37:// {
        -:   38:	
        -:   39:// 	for(int i=0; i<3; i++){
        -:   40:// 		for(int j=0; j<3; j++){
        -:   41:// 			board[i][j] = Blank;
        -:   42:// 		}
        -:   43:// 	}
        -:   44:// }
        -:   45:/**
        -:   46: * Places the piece of the current turn on the board, returns what
        -:   47: * piece is placed, and toggles which Piece's turn it is. placePiece does
        -:   48: * NOT allow to place a piece in a location where there is already a piece.
        -:   49: * In that case, placePiece just returns what is already at that location.
        -:   50: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   51: * is over, no more pieces can be placed so attempting to place a piece
        -:   52: * should neither change the board nor change whose turn it is.
        -:   53: **/
    #####:   54:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   55:{
    #####:   56:  if (board[row][column] == Blank && turn == X)
        -:   57:  {
    #####:   58:    board[row][column] = X;
        -:   59:  }
    #####:   60:  else if (board[row][column] == Blank && turn == O)
        -:   61:  {
    #####:   62:    board[row][column] = O;
        -:   63:  }
        -:   64:  else
    #####:   65:    return Invalid;
        -:   66:
    #####:   67:  return board[3][3];
        -:   68:}
        -:   69:
        -:   70:/**
        -:   71: * Returns what piece is at the provided coordinates, or Blank if there
        -:   72: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   73: **/
    #####:   74:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   75:{
    #####:   76:  if (board[row][column] == Blank)
        -:   77:  {
    #####:   78:    return Blank;
        -:   79:  }
    #####:   80:  else if (board[row][column] != Blank && board[row][column] != Invalid)
        -:   81:  {
    #####:   82:    return board[row][column];
        -:   83:  }
        -:   84:  else
    #####:   85:    return Invalid;
        -:   86:}
        -:   87:
        -:   88:/**
        -:   89: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   90: * is not over, or Blank if the board is filled and no one has won.
        -:   91: **/
    #####:   92:Piece TicTacToeBoard::getWinner()
        -:   93:{
    #####:   94:  return Invalid;
        -:   95:}
